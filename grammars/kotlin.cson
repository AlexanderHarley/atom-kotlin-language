{
  name: "Kotlin"
  scopeName: "source.kotlin"
  fileTypes: [
    "kt"
    "kts"
  ]
  patterns: [
    {
      include: "#comments"
    }
    {
      captures:
        1:
          name: "keyword.other.kotlin"

        2:
          name: "entity.name.package.kotlin"

      match: "^\\s*(package)\\b(?:\\s*([^ ;$]+)\\s*)?"
    }
    {
      include: "#imports"
    }
    {
      include: "#statements"
    }
  ]
  repository:
    statements:
      patterns: [
        {
          include: "#namespaces"
        }
        {
          include: "#typedefs"
        }
        {
          include: "#classes"
        }
        {
          include: "#functions"
        }
        {
          include: "#variables"
        }
        {
          include: "#getters-and-setters"
        }
        {
          include: "#expressions"
        }
      ]

    comments:
      patterns: [
        {
          begin: "/\\*"
          captures:
            0:
              name: "punctuation.definition.comment.kotlin"

          end: "\\*/"
          name: "comment.block.kotlin"
          patterns: [include: "#comments"]
        }
        {
          captures:
            1:
              name: "comment.line.double-slash.kotlin"

            2:
              name: "punctuation.definition.comment.kotlin"

          match: "\\s*((//).*$\\n?)"
        }
      ]

    imports:
      patterns: [
        captures:
          1:
            name: "keyword.other.kotlin"

          2:
            name: "keyword.other.kotlin"

        match: "^\\s*(import)\\s+[^ $]+\\s+(as)?"
      ]

    namespaces:
      patterns: [
        {
          match: "\\b(namespace)\\b"
          name: "keyword.other.kotlin"
        }
        {
          begin: "\\{"
          end: "\\}"
          patterns: [include: "#statements"]
        }
      ]

    types:
      patterns: [
        {
          match: "\\b(Any|Unit|String|Int|Boolean|Char|Long|Double|Float|Short|Byte|dynamic)\\b"
          name: "storage.type.buildin.kotlin"
        }
        {
          match: "\\b(IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray)\\b"
          name: "storage.type.buildin.array.kotlin"
        }
        {
          begin: "\\b(Array|List|Map)<\\b"
          beginCaptures:
            1:
              name: "storage.type.buildin.collection.kotlin"

          end: ">"
          patterns: [
            {
              include: "#types"
            }
            {
              include: "#keywords"
            }
          ]
        }
        {
          begin: "\\w+<"
          end: ">"
          patterns: [
            {
              include: "#types"
            }
            {
              include: "#keywords"
            }
          ]
        }
        {
          begin: "(#)\\("
          beginCaptures:
            1:
              name: "keyword.operator.tuple.kotlin"

          end: "\\)"
          patterns: [include: "#expressions"]
        }
        {
          begin: "\\{"
          end: "\\}"
          patterns: [include: "#statements"]
        }
        {
          begin: "\\("
          end: "\\)"
          patterns: [include: "#types"]
        }
        {
          match: "(->)"
          name: "keyword.operator.declaration.kotlin"
        }
      ]

    generics:
      patterns: [
        {
          begin: "(:)"
          beginCaptures:
            1:
              name: "keyword.operator.declaration.kotlin"

          end: "(?=,|>)"
          patterns: [include: "#types"]
        }
        {
          include: "#keywords"
        }
        {
          match: "\\w+"
          name: "storage.type.generic.kotlin"
        }
      ]

    typedefs:
      begin: "(?=\\s*(?:type))"
      end: "(?=$)"
      patterns: [
        {
          match: "\\b(type)\\b"
          name: "keyword.other.kotlin"
        }
        {
          begin: "<"
          end: ">"
          patterns: [include: "#generics"]
        }
        {
          include: "#expressions"
        }
      ]

    classes:
      begin: "(?=\\s*(?:companion|class|object|interface))"
      end: "}|(?=$)"
      patterns: [
        {
          begin: "\\b(companion\\s*)?(class|object|interface)\\b"
          beginCaptures:
            1:
              name: "keyword.other.kotlin"
            2:
              name: "keyword.other.kotlin"

          end: "(?=<|{|\\(|:)"
          patterns: [
            {
              match: "\\b(object)\\b"
              name: "keyword.other.kotlin"
            }
            {
              match: "\\w+"
              name: "entity.name.type.class.kotlin"
            }
          ]
        }
        {
          begin: "<"
          end: ">"
          patterns: [include: "#generics"]
        }
        {
          begin: "\\("
          end: "\\)"
          patterns: [include: "#parameters"]
        }
        {
          begin: "(:)"
          beginCaptures:
            1:
              name: "keyword.operator.declaration.kotlin"

          end: "(?={|$)"
          patterns: [
            {
              match: "\\w+"
              name: "entity.other.inherited-class.kotlin"
            }
            {
              begin: "\\("
              end: "\\)"
              patterns: [include: "#expressions"]
            }
          ]
        }
        {
          begin: "\\{"
          end: "\\}"
          patterns: [include: "#statements"]
        }
      ]

    variables:
      begin: "(?=\\s*(?:var|val))"
      end: "(?=:|=|$)"
      patterns: [
        {
          begin: "\\b(var|val)\\b"
          beginCaptures:
            1:
              name: "keyword.other.kotlin"

          end: "(?=:|=|$)"
          patterns: [
            {
              begin: "<"
              end: ">"
              patterns: [include: "#generics"]
            }
            {
              captures:
                2:
                  name: "entity.name.variable.kotlin"

              match: "([\\.<\\?>\\w]+\\.)?(\\w+)"
            }
          ]
        }
        {
          begin: "(:)"
          beginCaptures:
            1:
              name: "keyword.operator.declaration.kotlin"

          end: "(?==|$)"
          patterns: [
            {
              include: "#types"
            }
            {
              include: "#getters-and-setters"
            }
          ]
        }
        {
          begin: "(=)"
          beginCaptures:
            1:
              name: "keyword.operator.assignment.kotlin"

          end: "(?=$)"
          patterns: [
            {
              include: "#expressions"
            }
            {
              include: "#getters-and-setters"
            }
          ]
        }
      ]

    "getters-and-setters":
      patterns: [
        {
          begin: "\\b(get)\\b\\s*\\(\\s*\\)"
          beginCaptures:
            1:
              name: "entity.name.function.kotlin"

          end: "\\}|(?=\\bset\\b)|$"
          patterns: [
            {
              begin: "(=)"
              beginCaptures:
                1:
                  name: "keyword.operator.assignment.kotlin"

              end: "(?=$|\\bset\\b)"
              patterns: [include: "#expressions"]
            }
            {
              begin: "\\{"
              end: "\\}"
              patterns: [include: "#expressions"]
            }
          ]
        }
        {
          begin: "\\b(set)\\b\\s*(?=\\()"
          beginCaptures:
            1:
              name: "entity.name.function.kotlin"

          end: "\\}|(?=\\bget\\b)|$"
          patterns: [
            {
              begin: "\\("
              end: "\\)"
              patterns: [include: "#parameters"]
            }
            {
              begin: "(=)"
              beginCaptures:
                1:
                  name: "keyword.operator.assignment.kotlin"

              end: "(?=$|\\bset\\b)"
              patterns: [include: "#expressions"]
            }
            {
              begin: "\\{"
              end: "\\}"
              patterns: [include: "#expressions"]
            }
          ]
        }
      ]

    functions:
      begin: "(?=\\s*(?:fun))"
      end: "}|(?=$)"
      patterns: [
        {
          begin: "\\b(fun)\\b"
          beginCaptures:
            1:
              name: "keyword.other.kotlin"

          end: "(?=\\()"
          patterns: [
            {
              begin: "<"
              end: ">"
              patterns: [include: "#generics"]
            }
            {
              captures:
                2:
                  name: "entity.name.function.kotlin"

              match: "([\\.<\\?>\\w]+\\.)?(\\w+)"
            }
          ]
        }
        {
          begin: "\\("
          end: "\\)"
          patterns: [include: "#parameters"]
        }
        {
          begin: "(:)"
          beginCaptures:
            1:
              name: "keyword.operator.declaration.kotlin"

          end: "(?={|=|$)"
          patterns: [include: "#types"]
        }
        {
          begin: "\\{"
          end: "(?=\\})"
          patterns: [include: "#statements"]
        }
        {
          begin: "(=)"
          beginCaptures:
            1:
              name: "keyword.operator.assignment.kotlin"

          end: "(?=$)"
          patterns: [include: "#expressions"]
        }
      ]

    parameters:
      patterns: [
        {
          begin: "(:)"
          beginCaptures:
            1:
              name: "keyword.operator.declaration.kotlin"

          end: "(?=,|\\)|=)"
          patterns: [include: "#types"]
        }
        {
          begin: "(=)"
          beginCaptures:
            1:
              name: "keyword.operator.declaration.kotlin"

          end: "(?=,|\\))"
          patterns: [include: "#expressions"]
        }
        {
          include: "#keywords"
        }
        {
          match: "\\w+"
          name: "variable.parameter.function.kotlin"
        }
      ]

    expressions:
      patterns: [
        {
          begin: "\\("
          end: "\\)"
          patterns: [include: "#expressions"]
        }
        {
          include: "#types"
        }
        {
          include: "#strings"
        }
        {
          include: "#constants"
        }
        {
          include: "#comments"
        }
        {
          include: "#keywords"
        }
      ]

    strings:
      patterns: [
        {
          begin: "\"\"\""
          beginCaptures:
            0:
              name: "punctuation.definition.string.begin.kotlin"

          end: "\"\"\""
          endCaptures:
            0:
              name: "punctuation.definition.string.end.kotlin"

          name: "string.quoted.third.kotlin"
          patterns: [
            {
              match: "(\\$\\w+|\\$\\{[^\\}]+\\})"
              name: "variable.parameter.template.kotlin"
            }
            {
              match: "\\\\."
              name: "constant.character.escape.kotlin"
            }
          ]
        }
        {
          begin: "\""
          beginCaptures:
            0:
              name: "punctuation.definition.string.begin.kotlin"

          end: "\""
          endCaptures:
            0:
              name: "punctuation.definition.string.end.kotlin"

          name: "string.quoted.double.kotlin"
          patterns: [
            {
              match: "(\\$\\w+|\\$\\{[^\\}]+\\})"
              name: "variable.parameter.template.kotlin"
            }
            {
              match: "\\\\."
              name: "constant.character.escape.kotlin"
            }
          ]
        }
        {
          begin: "'"
          beginCaptures:
            0:
              name: "punctuation.definition.string.begin.kotlin"

          end: "'"
          endCaptures:
            0:
              name: "punctuation.definition.string.end.kotlin"

          name: "string.quoted.single.kotlin"
          patterns: [
            match: "\\\\."
            name: "constant.character.escape.kotlin"
          ]
        }
        {
          begin: "`"
          beginCaptures:
            0:
              name: "punctuation.definition.string.begin.kotlin"

          end: "`"
          endCaptures:
            0:
              name: "punctuation.definition.string.end.kotlin"

          name: "string.quoted.single.kotlin"
        }
      ]

    constants:
      patterns: [
        {
          match: "\\b(true|false)\\b"
          name: "constant.language.boolean.kotlin"
        }
        {
          match: "\\b(0(x|X)[0-9A-Fa-f_]*)([LuU]|[uU]L)?\\b"
          name: "constant.numeric.hex.kotlin"
        }
        {
          match: "\\b(0(b|B)[0-1_]*)([LuU]|[uU]L)?\\b"
          name: "constant.numeric.binary.kotlin"
        }
        {
          match: "\\b([0-9][0-9_]*\\.[0-9][0-9_]*[fFL]?)\\b"
          name: "constant.numeric.float.kotlin"
        }
        {
          match: "\\b([0-9][0-9_]*([fFLuU]|[uU]L)?)\\b"
          name: "constant.numeric.integer.kotlin"
        }
        {
          match: "\\b(null)\\b"
          name: "constant.language.null.kotlin"
        }
      ]

    keywords:
      patterns: [
        {
          match: "(\\!in|\\!is|as\\?)\\b"
          name: "keyword.operator.kotlin"
        }
        {
          match: "\\b(in|is|as|assert)\\b"
          name: "keyword.operator.kotlin"
        }
        {
          match: "\\b(const)\\b"
          name: "storage.modifier.kotlin"
        }
        {
          match: "\\b(val|var)\\b"
          name: "storage.type.kotlin"
        }
        {
          match: "\\b(\_)\\b"
          name: "punctuation.definition.variable.kotlin"
        }
        {
          match: "\\b(data|inline|tailrec|operator|infix|typealias|reified)\\b"
          name: "storage.type.kotlin"
        }
        {
          match: "\\b(external|public|private|protected|internal|abstract|final|sealed|enum|open|annotation|override|vararg|typealias|expect|actual|yield|out|in|lateinit)\\b"
          name: "storage.modifier.kotlin"
        }
        {
          match: "\\b(suspend(?!\\s*[\\(]?\\s*\\{))\\b"
          name: "storage.modifier.kotlin"
        }
        {
          match: "\\b(try|catch|finally|throw)\\b"
          name: "keyword.control.catch-exception.kotlin"
        }
        {
          match: "\\b(if|else|when)\\b"
          name: "keyword.control.conditional.kotlin"
        }
        {
          match: "\\b(while|for|do|return|break|continue)\\b"
          name: "keyword.control.kotlin"
        }
        {
          match: "\\b(constructor|init)\\b"
          name: "entity.name.function.constructor"
        }
        {
          match: "\\b(companion|object)\\b"
          name: "storage.type.kotlin"
        }
        {
          match: "\\b(class)\\b"
          name: "constant.language.kotlin"
        }
        {
          match: "\\b(this|super)\\b"
          name: "variable.language.kotlin"
        }
      ]
}
